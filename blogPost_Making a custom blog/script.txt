|[color #fff size large default align center size xx-large color #0f0]One optional, but useful, part of any project is recording the process.|[color size align]
|[break break]I have always tried to do this, with varying amounts of success, and varying amounts of effort, and with varying medians, with my most recent median being |[italic]discord|[italic].
|[break break]Since discord is not a place designed to be used for blogs, it lacks a lot of aspects I would want for a blog, things like:
|[break space color #0f0]*|[color] A lack of any good way to insert media throughout a message.
|[break space color #0f0]*|[color] A very limiting file size for anything uploaded.
|[break space color #0f0]*|[color] No way of adding |[color #f33]c|[color #6f6]o|[color #33f]l|[color #f33]o|[color #6f6]r|[color #33f]e|[color #f33]d|[color] text.
|[break space color #0f0]*|[color] Very limited formatting.
|[break space color #0f0]*|[color] No way to embed live code.
|[break space color #0f0]*|[color] No good way to share posts.
|[break space color #0f0]*|[color] No guarantee that the posts wouldn't be removed.
|[break]And |[italic bold]no way|[bold italic] to change any of this.

|[break 2 size x-large]So I decided to make my own blog|[size]
|[break 1]But this comes with a lot of challenges too:
|[break space color #0f0]*|[color] How am I going to model this blog?
|[break space color #0f0]*|[color] What do I want the process of creating a post to look like?
|[break space color #0f0]*|[color] What all do I want a post to be capable of?
|[break space color #0f0]*|[color] Whats going to tie all the posts together?
|[break space color #0f0]*|[color] Have I fed my cat yet?
|[break space color #0f0]*|[color] How am I going to publish this blog?
|[break break]Some of there questions have easy answers:
|[break space color #0f0]*|[color italic] What do I want the process of creating a post to look like? |[italic]I want to write text as markup in a text file, putting links to media in the text as needed, and just putting all the media and text in a folder and having it automatically generate a post.  
|[break space color #0f0]*|[color italic] Whats going to tie all the posts together? |[italic]A home page with previews of each post that can be clicked to open them.
|[break space color #0f0]*|[color italic] Have I fed my cat yet? |[italic]Yes, though she says otherwise.
|[break space color #0f0]*|[color italic] How am I going to publish this blog? |[italic]I can just push to github, then use Vercel to host the site.
|[break]

|[break]Starting off I wanted to use a new design for project: processing all the posts on my local machine, then only publishing the translated files, seeing as this needs file manipulation to do (since all the files for the finished website would be generated by other code), and I am most familiar with JS, node seemed like the logical choice for a base.
|[break break]Time to start: I make a script to scan all the files in a specific folder for posts, |[size small]processing them all slightly to format them for html, |[size x-small]putting them together in a folder, |[size xx-small]and pushing them to github...
|[break break size]I had forgot an important step: before I can have posts I need a home page to get to the posts from.
|[break]But I wanted this page to look |[italic]nice|[italic], and not just be an empty page of links, so I looked around for inspiration, and I found this:
|[image factorioBlog.png]

And look at it: a nice title section, a consistent color scheme, inline images, and (not shown) videos!
|[break]But more importantly, |[italic]the background|[italic], it ties the post together without making it feel like it consumes all the screen space, plus with an already semi vertical design making this site work on mobile will be much easier.
|[break break]Now that I had a layout I needed a background, for the factorio example a factory in the background is in theme, but for my blog the topic changes, I can't just have an image of a finished project (or I |[italic]could|[italic] but I don't like the idea of that), I wanted something relevant to all my projects.
|[break break]But what do all my projects have in common?
|[break .5 bold]Programming.|[bold] 
|[break .5 italic]I knew what I wanted:|[italic]

|[break 1.5 align center size x-large color #0f0 bold]Live backgrounds
|[reset]
|[break 1.5]What is a live background? For my use cases a live background is any background that is not pre generated, but is instead has a small program running to generate the background live.
|[break break]Planning: what power did I want to give these backgrounds? How do I want to structure them? And how do I want to theme them?
|[break break]Next I created a simple system to create live backgrounds thats answers these questions:
|[break space color #0f0]*|[color] Each background is a js module.
|[break space color #0f0]*|[color] The backgrounds render on a canvas element set behind all the websites content.
|[break space color #0f0]*|[color] Each background exports a |[code color #666]start|[code color] and a |[code color #666]stop|[code color] function.
|[break space color #0f0]*|[color] Each background grabs the canvas and context each time it's start function is ran.
|[break space color #0f0]*|[color] A central script schedules starting and stopping each background, as well as mixing them to ensure each one gets the appropriate screen time.
|[break break]And while this was nice, the system had its problems:
|[break space color #0f0]*|[color] Since each background was in charge of keeping a loop, when I ended one background and started a new one, sometimes the old background would run one more loop.
|[break space color #0f0]*|[color] It had too much repeated code for each background.
|[break space color #0f0]*|[color] With each background grabbing the canvas and context every time they start, it could sometimes lead to bugs where one background would have the context when another background tried to use it.

|[break break]While this isn't a lot of bugs, it really killed the polished feel I wanted, with small bugs happening frequently, so I needed a new system:
|[break space color #0f0]*|[color] Each background is still a js module.
|[break space color #0f0]*|[color] The backgrounds still render on a background canvas.
|[break space color #0f0]*|[color] Each background exports a |[code color #666]start|[code color], |[code color #666]update|[code color], and a |[code color #666]stop|[code color] function.
|[break space color #0f0]*|[color] Each background is given the canvas and context through its exposed functions.
|[break space color #0f0]*|[color] Instead of a background creating its own loop, the central script is in charge of updating the background each frame.
|[break break]With just these small changes, the backgrounds ran smoothly, with no issues with them running when they shouldn't.
|[break]They were done.

|[break align center size small italic] Want to see more?|[italic]
|[fold close]

|[video liveBackgrounds.mp4 .5]

|[align break]Some other features I added include:
|[break space color #0f0]*|[color] When changing backgrounds, the canvas blurs and fades out, to remove any jarring changes.
|[break space color #0f0]*|[color] The scripts for the backgrounds are not loaded until they are needed, this can speed up the loading of the website there are large backgrounds (or a large number of backgrounds).
|[break space color #0f0]*|[color] Backgrounds changing the size and complexity to run fast on mobile devices
|[break space color #0f0]*|[color] Live backgrounds used in posts can be shared with the home page's backgrounds.
|[break space color #0f0]*|[color] A few live backgrounds with a consistent theme.
|[reset]
|[fold]

|[break align center color #0f0 size xx-large] ------------------------- |[reset]
|[break align center]Now that I had backgrounds |[italic]and|[italic] website structure, it was time for the hard part:
|[break size x-large color #0f0 bold]Making the markup
|[reset break italic]But what is markup?|[italic]
|[break]Markup is the way I can write with text with formatting, it's how I can do |[size xx-large color #0f0 bold italic]this|[reset]
|[break]When I used discord there were a few different ways to write markup, there was |[italic]*italic*|[italic], |[bold]**bold**|[bold], |[italic bold]***bold italic***|[italic bold], |[strike]~~strikethrough~~|[strike], or |[code]``code``|[code].
|[break break]But that style can cause problems, sometimes when sending text not designed for discords formatting there would be unwanted markup, and there was no good to remember what markup does what, so I needed my own style: and I like the "tags" method: where my markup is broken into two types, text and tag groups: "|[|tag1 tag2 tag3] and text", this way I can have whatever I want to be tags as tags, without having to worry about using symbols or patterns used in the regular text.

|[break break]The |[italic]only|[italic] thing I have to worry about is what symbols to use to open and close a group of tags, and since I wanted something visually compact, I decided on |[| to open and ] to close, with the only restriction on the tags being that they cannot contain either the opening or closing symbols.

|[break break]Time for an example:
|[break]|[|align center size large]Before |[|color #0f0]green|[|color] it was boring
|[break]Would become:
|[align center size large]Before |[color #0f0]green|[color] it was boring|[align]

|[break  italic]How does it work?|[italic]
|[break space color #0f0 italic]1|[italic color] The markup file (which is just stored as plaintext) is read and turned into one long string, removing any line breaks. 
|[break space color #0f0 italic]2|[italic color] The string is split by at each "|[|" unless the symbol directly after is a "|" (so to write "|[|", I would write "|[||").
|[break space color #0f0 italic]3|[italic color] Each slice of the string is split at the first "]".
|[break space color #0f0 italic]4|[italic color] Each slice within a |[|] gets split at each " ", resulting in an array of each word inside the tag group.
|[break space color #0f0 italic]5|[italic color] The array of arrays gets flattened, resulting in an array of items that are each either an array of tags, or a string.
|[break space color #0f0 italic]6|[italic color] The items are looped through, if the item is a string, a styled span element gets pushed to the html with the text of the item, otherwise each tag is looped through, applying its effects.
|[break space color #0f0 italic]7|[italic color] The finished html is returned, with the default styles, any needed scripts, and the translated markup inside.

|[break align center size x-large]Now for my favorite feature of the markup: |[break script liveCodeSnippet.js] |[reset]
|[break]This means I can run arbitrary js code anywhere throughout the posts, with each of them able to create a canvas or other html elements for rendering or inputting.

|[break break]And arbitrary code means I can change |[italic bold]any aspect of the website|[bold italic], like adding the flickering text above, |[script changingTextSnippet.js], or text that changes the background color when clicked? |[script backgroundColorSnippet.js] And so much more|[script trailingSnippet.js] 

|[break align center size small](Of course there are |[italic]many|[italic] other small steps in translating markup, and many other features with it, but if I explained every aspect of the code this post would be far too long, however if you are interested in what tags I have created, I have included all the ones I have created at the time of writing this post below)
|[fold close]
|[align]
the tags are below, items in the first column are the keywords, items in the second column are values to be used.
|[break]a !-> in the second column indicates the action that happens if non of the other options are there
|[break]values in the second column with a [] signify that you put a value there (but don't include the [])
|[break]values in the second column with a ?[] signify that the value is optional
|[break]
|[break color #0f0 space]*|[color] color: -> sets the text color to the most efficient hex value that represents prop 1
|[break color #0f0 space]* *|[color] #[rgb] -> each range is in the value 0-f in base 16
|[break color #0f0 space]* *|[color] #[rgba]
|[break color #0f0 space]* *|[color] #[rrggbb]
|[break color #0f0 space]* *|[color] #[rrggbbaa]
|[break color #0f0 space]* *|[color] rgb([r],[g],[b]) -> each value is in the range 0-255
|[break color #0f0 space]* *|[color] rgb([r],[g],[b],[a])
|[break color #0f0 space]* *|[color] rgba([r],[g],[b])
|[break color #0f0 space]* *|[color] rgba([r],[g],[b],[a])
|[break color #0f0 space]* *|[color] !-> sets color to the default color
|[break color #0f0 space]*|[color] italic: -> sets whether text will be italic
|[break color #0f0 space]* *|[color] on | true
|[break color #0f0 space]* *|[color] off | false
|[break color #0f0 space]* *|[color] !-> toggles italics
|[break color #0f0 space]*|[color] bold: -> sets whether text will be bold
|[break color #0f0 space]* *|[color] on | true
|[break color #0f0 space]* *|[color] off | false
|[break color #0f0 space]* *|[color] !-> toggles bold text
|[break color #0f0 space]*|[color] space: -> adds [number] spaces using '&nbsp;' after
|[break color #0f0 space]* *|[color] [number]
|[break color #0f0 space]* *|[color] !-> defaults to 1
|[break color #0f0 space]*|[color] tabs: -> adds [number] spaces * tabSize (defaults to 3) after
|[break color #0f0 space]* *|[color] [number]
|[break color #0f0 space]* *|[color] !-> defaults to 1
|[break color #0f0 space]*|[color] break: -> used to make new lines
|[break color #0f0 space]* *|[color] [number] -> creates a break and then inserts a blank line of [number] lines in height, then second break
|[break color #0f0 space]* *|[color] !-> just adds the "br" element
|[break color #0f0 space]*|[color] size: -> sets the text size
|[break color #0f0 space]* *|[color] xx-small | x-small | smaller | small | medium | large | larger | x-large | xx-large -> uses the default sizes
|[break color #0f0 space]* *|[color] [number] -> (viewport width + viewport height) / 2 * [number], [number] is in the range [number] >= 0.02
|[break color #0f0 space]* *|[color] !-> sets size to the default size
|[break color #0f0 space]*|[color] code: -> sets whether text will be code using <code></code>
|[break color #0f0 space]* *|[color] on | true
|[break color #0f0 space]* *|[color] off | false
|[break color #0f0 space]* *|[color] !-> toggles code text
|[break color #0f0 space]*|[color] align: -> sets which direction text should align (changing align triggers a break)
|[break color #0f0 space]* *|[color] left | center | right
|[break color #0f0 space]* *|[color] !-> sets align to the default align
|[break color #0f0 space]*|[color] reset: 
|[break color #0f0 space]* *|[color] [property] -> sets [property] to the default [property]
|[break color #0f0 space]* *|[color] !-> resets the full style to the default style
|[break color #0f0 space]*|[color] default: -> changes the default used for many tags, but does not change the default retrospectively
|[break color #0f0 space]* *|[color] global -> sets the global default, this is the default used to generate the local (the default always used) default, also sets the local default 
|[break color #0f0 space]* *|[color] !-> sets the default style to the current style
|[break color #0f0 space]*|[color] fold: -> creates foldable content, with all content until the fold close being inside (fold triggers a break)
|[break color #0f0 space]* *|[color] open | close -> starts a fold that is open | closed at start
|[break color #0f0 space]* *|[color] !-> closes a fold
|[break color #0f0 space]*|[color] image: -> embeds an image in the next line
|[break color #0f0 space]* *|[color] [name] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two images side by side
|[break color #0f0 space]* *|[color] [name] !-> defaults to 1
|[break color #0f0 space]*|[color] showMarkup: -> sets whether the markup tags will be hidden (defaults to false)
|[break color #0f0 space]* *|[color] on | true
|[break color #0f0 space]* *|[color] off | false
|[break color #0f0 space]* *|[color] !-> toggles
|[break color #0f0 space]*|[color] COMMENT: -> "comments" out the line, must be alone in the tag bracket, and the first thing in the line: |[|COMMENT]
|[break color #0f0 space]*|[color] video: -> embeds a video in the next line
|[break color #0f0 space]* *|[color] [name] [size] -> size is relative to the div, so a size of 1 would fill the space, or a size of .5 could fit two videos side by side
|[break color #0f0 space]* *|[color] [name] !-> defaults to 1
|[break color #0f0 space]*|[color] strike: -> sets whether text will have strikethrough
|[break color #0f0 space]* *|[color] on | true
|[break color #0f0 space]* *|[color] off | false
|[break color #0f0 space]* *|[color] !-> toggles strikethrough
|[break color #0f0 space]*|[color] script: -> embeds a piece of live code
|[break color #0f0 space]* *|[color] [path] -> where to find the script
|[fold]

|[break align center color #0f0 size xx-large] ------------------------- |[reset]
|[break]At this point I could be done, the website is fully functional, it supports a rich markup, and it has the theme I was wanting.
|[break .5 align center size x-large]But why stop there?
|[break reset size italic]There's always stuff to add...|[italic]
|[break size small]Unfortunately while all of these coming features are relevant to the project, they have no clear order or relevance to each other, so they will be listed in order of creation.

|[break break size x-large color #0f0]Link previews
|[break reset size fold close reset]
What do I mean by link previews? I mean the nice attachment that sometimes appears when you paste a link.
|[align center image exampleLinkPreview.png .5 reset]
Turns out there a few main ways of creating these previews:
|[break]Theres the normal |[code]meta name="title"|[code] and |[code]meta name="description"|[code] elements.
|[break] But theres also the Open Graph Protocol which supports:
|[break space color #0f0]*|[color] |[code]og:title|[code]
|[break space color #0f0]*|[color] |[code]og:type|[code] eg: article
|[break space color #0f0]*|[color] |[code]og:url|[code]
|[break space color #0f0]*|[color] |[code]og:description|[code]
|[break space color #0f0]*|[color] |[code]og:image|[code]
|[break]And |[strike]Twitter's|[strike] X's protocol which supports:
|[break space color #0f0]*|[color] |[code]twitter:card|[code]
|[break space color #0f0]*|[color] |[code]twitter:type|[code] eg: article
|[break space color #0f0]*|[color] |[code]twitter:url|[code]
|[break space color #0f0]*|[color] |[code]twitter:description|[code]
|[break space color #0f0]*|[color] |[code]twitter:image|[code]
|[break]Unfortunately there is no one clear method to be supported on all platforms, so I just used all of the above methods at once.

|[break break]Now the problem of what to display, the title, type, url, description, and card are clear, I already have these defined for the previews on the home page, but what to use for the image wasn't clear, I needed something to portray the post and the site.
|[break break]...Or I could |[italic]not|[italic] add a new requirement to each post to have a preview image, instead just taking an image of the post for the preview. But getting that image is harder, I had no good way to turn the website's files into an image except rendering it in a browser...

|[break break]I |[bold]could|[bold] just render it with a browser and take a screenshot, I just have to do so automatically every time the post changes.
|[break]Since the previews are static, I can create them before I publish the site, eg I can get the screenshots using node.
|[break]Before I can do that, I need to define the steps:
|[break space color #0f0]1|[color] Create a server for the website so a browser can "visit" it.
|[break space color #0f0]2|[color] Open a browser I can control.
|[break space color #0f0]3|[color] Navigate to the page.
|[break space color #0f0]4|[color] Screenshot the page and save it to the websites folder.
|[break space color #0f0]5|[color] Close the browser.
|[break space color #0f0]6|[color] Kill the server.
|[break]And since I am using node, finding the tools to do this was surprisingly simple, I can use the |[code]express|[code] module for the server, and the |[code]puppeteer|[code] module to do all the browser stuff.
 
|[break break]Since I don't have to worry about unknown file changes while the server is up, the rest of the screenshotting process went smoothly, with the only other real problem being speed: opening a server, then a browser, then a page, screenshotting, and closing it all for a single screenshot takes longer than the entirety of my program before (up to around 1 second from 1/10 of a second), I managed to optimize it a lot though, only screenshotting if the content changed, reusing the same server / browser for every screenshot, and only opening the server / browser if a new screenshot is needed.

|[break break]It was worth it in the end, now I have nice link previews too:
|[align center image linkPreview.png .5]
|[fold]
|[align center color #0f0 size xx-large] ------------------------- 

|[break align center size x-large color #0f0]Live post preview
|[break reset size fold close reset]
stuff in a fold
|[fold]
|[align center color #0f0 size xx-large] ------------------------- 

|[break align center size x-large color #0f0]Visit counter
|[break reset size fold close reset]
stuff in a fold
|[fold]
|[align center color #0f0 size xx-large] ------------------------- 

|[break align center size x-large color #0f0]Downloadable app
|[break reset size fold close reset]
stuff in a fold
|[fold]
|[align center color #0f0 size xx-large] ------------------------- 

|[break align center size x-large color #0f0]Comments
|[break reset size fold close reset]
stuff in a fold
|[fold]
|[align center color #0f0 size xx-large] ------------------------- 

|[break align center size x-large color #0f0]Auto deploy with history
|[break reset size fold close reset]
stuff in a fold
|[fold]
|[align center color #0f0 size xx-large] ------------------------- 

|[break align center size x-large color #0f0]Stats
|[break reset size fold close reset]
stuff in a fold
|[fold]
|[align center color #0f0 size xx-large] ------------------------- 



|[COMMENT] |[break]At this point I was practically done, and I had no more large parts of the project left, all that was left was combining everything and adding small features, some features such as:
|[COMMENT] |[break space color #0f0]*|[color] Counting the number of lines of code every publish for a nice statistic.
|[COMMENT] |[break space color #0f0]*|[color] Hashing every file of the output site for change detection.
|[COMMENT] |[break space color #0f0]*|[color] Displaying the combined hash of the entire site as a nice statistic on the home page.
|[COMMENT] |[break space color #0f0]*|[color] A script to push the site to github at a click of a button, with an accurate commit message of all the changed files.
|[COMMENT] |[break space color #0f0]*|[color] Counting every unique line for a fancy background.
|[COMMENT] |[break space color #0f0]*|[color] Using the hashes of each post to display the last time they were uploaded.
|[COMMENT] |[break space color #0f0]*|[color] Turning each file into a value of a giant object for the "writing code" live background.
|[COMMENT] |[break space color #0f0]*|[color] A text file for all the files to ignore when scanning for stats.
|[COMMENT] |[break space color #0f0]*|[color] A "first published" stat for each post.
|[COMMENT] |[break space color #0f0]*|[color] An adaptive layout for mobile support, even extending to the live backgrounds.
|[COMMENT] |[break space color #0f0]*|[color] Optional preview / title markup files for each post.

|[break break align center size xx-large color #0f0]That's it for todays post, thanks for reading!